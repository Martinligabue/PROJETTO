progetto, specifiche

• Cifrare un messaggio di testo con una combinazione qualsiasi dei seguenti cifrari (algoritmi): A, B, C, D, E. Il messaggio di testo verrà cifrato utilizzando una parola chiave che definisce la sequenza delle cifrature da applicare al messaggio. La parola chiave è una stringa S="S1···Sk" formata da al massimo 5 caratteri (quindi con 1≤k≤5), in cui ciascun carattere Si (con 1≤i≤k) corrisponde ad uno fra i caratteri 'A', 'B', 'C', 'D' oppure 'E', ed identifica il corrispondente cifrario da applicare al messaggio al passo i-mo. L'ordine delle cifrature è quindi stabilito dall'ordine in cui appaiono i caratteri nella stringa. A titolo di esempio, si riportano alcuni possibili parole chiave: "C", oppure "AEC", oppure "DEDD", oppure "EEEEE", .... Ad esempio, la cifratura del messaggio di testo con la parola chiave "AEC" determinerà l'applicazione dell'algoritmo A, poi dell'algoritmo E (sul messaggio già cifrato con A) ed infine dell'algoritmo C (sul messaggio già cifrato prima con A e poi con E).
• Decifrare il messaggio di testo cifrato utilizzando la parola chiave invertita Ŝ= "Sk··· S1", ovvero invertendo gli Algoritmi di Cifratura e richiamandoli in ordine inverso (dall'ultimo algoritmo applicato al primo, ovvero da Sk a S1).

Note:
• la lunghezza massima k della parola chiave è pari a 4 caratteri, quindi S="S1∙∙∙Sk" con 1≤k≤5 (nella versione precedente del documento, k era uguale a 16);
• il file di testo "messaggio.txt" contenente il messaggio di testo da cifrare è composto da un massimo di 128 caratteri (nella versione precedente del documento, il file poteva contenere fino a 1024 caratteri).

Altre note: Si consiglia in particolare di implementare ogni cifrario (ciascun algoritmo A-B-C-D-E, e le loro inversioni per la decifratura) come una procedura.

Nota bene: Il codice consegnato deve essere funzionante sul simulatore QtSpim, anche se sviluppato e testato con altri simulatori (es, MARS)

Considerazioni personali: Commentare, sempre, syscall, niente accenti

######################
progetto, flow
pseudocodice

main:
	prima parte:
	chiede in input la parola
	la salva
	chiama i vari algoritmi in ordine e li fa lavorare sulla memoria
	produce il file di output

	seconda parte:
	fa tutto al contrario
A:
	sposta l'ascii di 4
	fa il mod 256
B:
	A, in posizione pari #problema: "il primo carattere del messaggio avrà indice 0, quindi pari"
C:
	B, ma dispari
D:
	inversione di tutto
E:
	ok, questa non è ez
	esempio del prof:
		 se "esempio di messaggio criptato -1" è il contenuto del messaggio di testo da cifrare, allora la cifratura con l'Algoritmo E produrrà come risultato: "e-0-2-12 s-1-13-14 m-3-11 p-4-24 i-5-9-18-23 o-6-19-28 -7-10-20-29 d-8 a-15-26 g-16-17 c-21 r-22 t-25- 27 --30 1-31".
	note sull'esempio (sempre dal prof):
		 Nella stringa " -7-10-20-29" il carattere in codifica è lo spazio (' ', codice ascii decimale 32), che appare nelle posizioni 7, 10, 20 e 29 del messaggio.
		 Nella stringa "--30" il carattere in codifica è '-' (il secondo carattere '-' è il carattere separatore fra gli elementi della sequenza), che appare nella posizione 30 del messaggio.
		 Nella stringa "1-31" il carattere in codifica è '1', che appare nella posizione 31 del messaggio.

	in altre parole: si prende il primo carattere, si scorre la lista, e ogni volta che compare lo salvi con "-n" con n posizione del carattere; quando hai finito con un carattere metti uno spazio e ricomincia finché \n

cose utili da implementare:
	stack
	buff.. ah no
	tabella hash per chiamare i metodi (tipo choice in java)
	syscall


oltre a questo:
fare l'antiE e il progetto non sarà ez, ma ci saltiamo fuori
